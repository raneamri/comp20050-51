Index: src/Torch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javafx.event.EventHandler;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Polygon;\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class Torch {\r\n    public Polygon interactable;\r\n    Ray ray;\r\n\r\n    //int i = array position of appropriate hexagon vertex\r\n    public Torch(Cell cell, int i) {\r\n        interactable = new Polygon();\r\n        //initializing array to contain hexagon points\r\n        ArrayList<Double> hexagonPoints = new ArrayList<>(cell.hexagon.getPoints());\r\n        double centerX = cell.hexagon.getBoundsInParent().getCenterX();\r\n        double centerY = cell.hexagon.getBoundsInParent().getCenterY();\r\n\r\n        //x and y offsets to place triangle vertices correctly on the board\r\n        double xOffset = cell.hexagon.getLayoutX();\r\n        double yOffset = cell.hexagon.getLayoutY();\r\n\r\n        double x1 = hexagonPoints.get(i) + xOffset;\r\n        double y1 = hexagonPoints.get(++i) + yOffset;\r\n        if(i == 11)//go back to beginning of hexagonPoints array\r\n            i = -1;\r\n        double x2 = hexagonPoints.get(++i) + xOffset;\r\n        double y2 = hexagonPoints.get(++i) + yOffset;\r\n\r\n\r\n        //Midpoint of hexagon side\r\n        double[] mainMidpoint = cell.midPoint(x1, y1, x2, y2);\r\n\r\n        //getting midpoints again to make triangle smaller by setting vertices on these midpoints\r\n        double[] x1midPoint = cell.midPoint(mainMidpoint[0], mainMidpoint[1], x1, y1);\r\n        double[] x2midPoint = cell.midPoint(mainMidpoint[0], mainMidpoint[1], x2, y2);\r\n        double[] centremidPoint = cell.midPoint(mainMidpoint[0], mainMidpoint[1], centerX, centerY);\r\n\r\n\r\n        interactable.getPoints().addAll(x1midPoint[0], x1midPoint[1], x2midPoint[0], x2midPoint[1], centremidPoint[0], centremidPoint[1]);\r\n        interactable.setFill(Color.RED);\r\n\r\n\r\n        interactable.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent event) {\r\n                //passing in hex side midpoint and hex centre to shoot ray\r\n                ray = new Ray(mainMidpoint[0], mainMidpoint[1], centerX, centerY);\r\n                System.out.println(\"ray cast\");\r\n                Main.getGroup().getChildren().add(ray);\r\n            }\r\n        });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Torch.java b/src/Torch.java
--- a/src/Torch.java	
+++ b/src/Torch.java	
@@ -17,13 +17,14 @@
         double centerX = cell.hexagon.getBoundsInParent().getCenterX();
         double centerY = cell.hexagon.getBoundsInParent().getCenterY();
 
+
         //x and y offsets to place triangle vertices correctly on the board
         double xOffset = cell.hexagon.getLayoutX();
         double yOffset = cell.hexagon.getLayoutY();
 
         double x1 = hexagonPoints.get(i) + xOffset;
         double y1 = hexagonPoints.get(++i) + yOffset;
-        if(i == 11)//go back to beginning of hexagonPoints array
+        if (i == 11)//go back to beginning of hexagonPoints array
             i = -1;
         double x2 = hexagonPoints.get(++i) + xOffset;
         double y2 = hexagonPoints.get(++i) + yOffset;
@@ -51,5 +52,10 @@
                 Main.getGroup().getChildren().add(ray);
             }
         });
+
     }
-}
\ No newline at end of file
+
+}
+
+
+
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport javafx.application.Application;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.stage.Stage;\r\n\r\npublic class Main extends Application {\r\n  /**\r\n   * Constant variables\r\n   */\r\n  private static final int HEIGHT = 1024;\r\n  private static final int WIDTH = 1024;\r\n  public static final int MAX_ATOMS = 6;\r\n\r\n  /**\r\n   * Player classes\r\n   */\r\n  // private static Setter setter = new Setter();\r\n  // private static Experimenter experimenter = new Experimenter();\r\n\r\n  /**\r\n   * Display classes\r\n   */\r\n  private static Group group = new Group();\r\n  public static ArrayList<Atom> atoms = new ArrayList<>();\r\n  public static ArrayList<Torch> torchs = new ArrayList<>();\r\n\r\n  /**\r\n   * JavaFX start function\r\n   */\r\n  @Override\r\n  public void start(Stage primaryStage) {\r\n    /**\r\n     * JavaFX display objects\r\n     */\r\n    StackPane root = new StackPane();\r\n    root.setStyle(\"-fx-background-color: black;\");\r\n\r\n    Button startBtn = new Button(\"Start\");\r\n    startBtn.setOnAction(event -> {\r\n      System.out.println(\"Start\");\r\n      ingame(primaryStage, root);\r\n      for(int i = 0; i < 3; i++)\r\n        root.getChildren().remove(0);\r\n      System.out.println(\"Menu hidden\");\r\n    });\r\n    root.getChildren().add(startBtn);\r\n    StackPane.setAlignment(startBtn, Pos.CENTER);\r\n\r\n    Button quitBtn = new Button(\"Quit\");\r\n    quitBtn.setOnAction(event -> {\r\n      System.out.println(\"Quit\");\r\n      System.exit(0);\r\n    });\r\n    root.getChildren().add(quitBtn);\r\n    StackPane.setAlignment(quitBtn, Pos.BOTTOM_CENTER);\r\n\r\n    Label menuTitle = new Label(\"BlackBox+\");\r\n    menuTitle.setStyle(\"-fx-text-fill: white; -fx-font-size: 50;\");\r\n    root.getChildren().add(menuTitle);\r\n    StackPane.setAlignment(menuTitle, Pos.TOP_CENTER);\r\n    System.out.println(\"Title created\");\r\n\r\n    Scene scene = new Scene(root, HEIGHT, WIDTH);\r\n\r\n    primaryStage.setScene(scene);\r\n    primaryStage.setTitle(\"BlackBox+ (51)\");\r\n    primaryStage.show();\r\n  }\r\n\r\n  private static void ingame(Stage primaryStage, StackPane root) {\r\n    /*\r\n     * Set up board\r\n     */\r\n    Board board = new Board();\r\n    board.getBoardGroup();\r\n    root.getChildren().add(getGroup());\r\n  }\r\n\r\n  public static Group getGroup() { return group; }\r\n\r\n  /**\r\n   * Conventional main function\r\n   */\r\n  public static void main(String[] args) { launch(args); }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	
+++ b/src/Main.java	
@@ -16,7 +16,7 @@
   private static final int WIDTH = 1024;
   public static final int MAX_ATOMS = 6;
 
-  /**
+  /*
    * Player classes
    */
   // private static Setter setter = new Setter();
Index: src/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/META-INF/MANIFEST.MF b/src/META-INF/MANIFEST.MF
new file mode 100644
--- /dev/null	
+++ b/src/META-INF/MANIFEST.MF	
@@ -0,0 +1,3 @@
+Manifest-Version: 1.0
+Main-Class: Main
+
